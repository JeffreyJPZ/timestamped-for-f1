# Installs configuration for services on a server and starts services
---

- name: Ensure project root directory exists
  become: yes
  ansible.builtin.file:
    path: "{{ timestamped_for_f1_docker_compose_path | dirname }}"
    state: directory
    mode: "0755"

- name: Copy over docker compose file to project root
  become: yes
  ansible.builtin.template:
    src: compose.yml.j2
    dest: "{{ timestamped_for_f1_docker_compose_path }}"
    owner: "{{ server_user }}"
    group: "{{ server_user }}"
    mode: "0644"

- name: Copy over environment variables for services as system level variables
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/environment
    regexp: "^{{ item.key }}="
    line: "{{ item.key }}={{ item.value }}"
    create: yes
    state: present
  loop: "{{ timestamped_for_f1_env_vars | dict2items }}"

- name: Ensure dashboard config directory exists
  become: yes
  ansible.builtin.file:
    path: "{{ timestamped_for_f1_dashboard_config_path | dirname }}"
    state: directory
    owner: "{{ server_user }}"
    group: "{{ server_user }}"
    mode: "0755"

- name: Copy over dashboard config
  become: yes
  ansible.builtin.template:
    src: dashboard.env.j2
    dest: "{{ timestamped_for_f1_dashboard_config_path }}"
    owner: "{{ server_user }}"
    group: "{{ server_user }}"
    mode: "0644"

- name: Ensure cache config directory exists
  become: yes
  ansible.builtin.file:
    path: "{{ timestamped_for_f1_cache_config_path | dirname }}"
    state: directory
    owner: "{{ server_user }}"
    group: "{{ server_user }}"
    mode: "0755"

- name: Copy over cache config
  become: yes
  ansible.builtin.template:
    src: redis.conf.j2
    dest: "{{ timestamped_for_f1_cache_config_path }}"
    owner: "{{ server_user }}"
    group: "{{ server_user }}"
    mode: "0644"

- name: Ensure web server config directory exists
  become: yes
  ansible.builtin.file:
    path: "{{ timestamped_for_f1_web_server_config_path | dirname }}"
    state: directory
    owner: "{{ server_user }}"
    group: "{{ server_user }}"
    mode: "0755"

- name: Copy over web server config
  become: yes
  ansible.builtin.template:
    src: caddyfile.conf.j2
    dest: "{{ timestamped_for_f1_web_server_config_path }}"
    owner: "{{ server_user }}"
    group: "{{ server_user }}"
    mode: "0644"
  
- name: Ensure docker daemon is running and enabled on boot
  become: yes
  ansible.builtin.service:
    name: docker
    state: started
    enabled: yes

- name: Start services
  become: yes
  ansible.builtin.command: "{{ item }}"
  loop:
    - "docker compose -f {{ timestamped_for_f1_docker_compose_path }} pull"
    - "docker compose -f {{ timestamped_for_f1_docker_compose_path }} up dashboard -d"

- name: Schedule docker image updates
  ansible.builtin.cron:
    name: "Docker image updates"
    minute: "0"
    hour: "0"
    day: "*"
    job: "docker compose -f {{ timestamped_for_f1_docker_compose_path }} pull && docker compose -f {{ timestamped_for_f1_docker_compose_path }} up dashboard -d --force-recreate"
    state: present

- name: Schedule docker cleanup job
  ansible.builtin.cron:
    name: "Docker cleanup"
    minute: "0"
    hour: "0"
    day: "*"
    job: "docker system prune"
    state: present
