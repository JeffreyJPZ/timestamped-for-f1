// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: cache.proto

package cache_api_grpc_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CacheKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The key to perform a cache lookup for.
	Key           string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CacheKey) Reset() {
	*x = CacheKey{}
	mi := &file_cache_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheKey) ProtoMessage() {}

func (x *CacheKey) ProtoReflect() protoreflect.Message {
	mi := &file_cache_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheKey.ProtoReflect.Descriptor instead.
func (*CacheKey) Descriptor() ([]byte, []int) {
	return file_cache_proto_rawDescGZIP(), []int{0}
}

func (x *CacheKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type CacheItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The new key for the cache item.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The new value of the cache item.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// The TTL for the cache item, in seconds.
	ExpirationTime float64 `protobuf:"fixed64,3,opt,name=expirationTime,proto3" json:"expirationTime,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CacheItem) Reset() {
	*x = CacheItem{}
	mi := &file_cache_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheItem) ProtoMessage() {}

func (x *CacheItem) ProtoReflect() protoreflect.Message {
	mi := &file_cache_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheItem.ProtoReflect.Descriptor instead.
func (*CacheItem) Descriptor() ([]byte, []int) {
	return file_cache_proto_rawDescGZIP(), []int{1}
}

func (x *CacheItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CacheItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CacheItem) GetExpirationTime() float64 {
	if x != nil {
		return x.ExpirationTime
	}
	return 0
}

type CacheResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The key for the cache item, if the item exists.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the cache item, if the item exists.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Unique error code, if the cache item does not exist.
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// Error details, if the cache item does not exist.
	Message       string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CacheResult) Reset() {
	*x = CacheResult{}
	mi := &file_cache_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheResult) ProtoMessage() {}

func (x *CacheResult) ProtoReflect() protoreflect.Message {
	mi := &file_cache_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheResult.ProtoReflect.Descriptor instead.
func (*CacheResult) Descriptor() ([]byte, []int) {
	return file_cache_proto_rawDescGZIP(), []int{2}
}

func (x *CacheResult) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CacheResult) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CacheResult) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CacheResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_cache_proto protoreflect.FileDescriptor

const file_cache_proto_rawDesc = "" +
	"\n" +
	"\vcache.proto\x12\x02v1\"\x1c\n" +
	"\bCacheKey\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\"[\n" +
	"\tCacheItem\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x12&\n" +
	"\x0eexpirationTime\x18\x03 \x01(\x01R\x0eexpirationTime\"c\n" +
	"\vCacheResult\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x12\x12\n" +
	"\x04code\x18\x03 \x01(\tR\x04code\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage2X\n" +
	"\x05Cache\x12&\n" +
	"\x03Get\x12\f.v1.CacheKey\x1a\x0f.v1.CacheResult\"\x00\x12'\n" +
	"\x03Set\x12\r.v1.CacheItem\x1a\x0f.v1.CacheResult\"\x00B\xb0\x01\n" +
	":com.github.jeffreyjpz.timestamped_for_f1.cache_api_grpc_v1B\x1eTimestampedForF1CacheApiGrpcV1P\x01ZPgithub.com/JeffreyJPZ/timestamped-for-f1-cache/pkg/api/grpc/v1;cache_api_grpc_v1b\x06proto3"

var (
	file_cache_proto_rawDescOnce sync.Once
	file_cache_proto_rawDescData []byte
)

func file_cache_proto_rawDescGZIP() []byte {
	file_cache_proto_rawDescOnce.Do(func() {
		file_cache_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cache_proto_rawDesc), len(file_cache_proto_rawDesc)))
	})
	return file_cache_proto_rawDescData
}

var file_cache_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_cache_proto_goTypes = []any{
	(*CacheKey)(nil),    // 0: v1.CacheKey
	(*CacheItem)(nil),   // 1: v1.CacheItem
	(*CacheResult)(nil), // 2: v1.CacheResult
}
var file_cache_proto_depIdxs = []int32{
	0, // 0: v1.Cache.Get:input_type -> v1.CacheKey
	1, // 1: v1.Cache.Set:input_type -> v1.CacheItem
	2, // 2: v1.Cache.Get:output_type -> v1.CacheResult
	2, // 3: v1.Cache.Set:output_type -> v1.CacheResult
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cache_proto_init() }
func file_cache_proto_init() {
	if File_cache_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cache_proto_rawDesc), len(file_cache_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cache_proto_goTypes,
		DependencyIndexes: file_cache_proto_depIdxs,
		MessageInfos:      file_cache_proto_msgTypes,
	}.Build()
	File_cache_proto = out.File
	file_cache_proto_goTypes = nil
	file_cache_proto_depIdxs = nil
}
